generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id               String            @id @default(cuid())
  name             String
  plan             PlanType          @default(STARTER)
  whatsappMode     WhatsAppMode      @default(DISABLED)
  whiteLabel       Json?             // { logoUrl, primaryColor, supportEmail }
  defaultWaSender  String?           // Default WhatsApp session ID for this tenant
  
  // Billing Information
  stripeCustomerId String?           // Stripe customer ID
  razorpayCustomerId String?         // Razorpay customer ID
  billingEmail     String?           // Billing email if different from user email
  
  // Usage Tracking (reset monthly)
  postCreditsUsed  Int               @default(0)
  imageCreditsUsed Int               @default(0)
  brandsCount      Int               @default(0)
  usageResetAt     DateTime          @default(now()) // Last reset date
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  brands           Brand[]
  posts            Post[]
  userTenants      UserTenant[]
  whatsappSessions WhatsAppSession[]
  usageLogs        UsageLog[]
  referrals        Referral[]      // Referrals for this tenant
  payoutLedger     PayoutLedger[]  // Payouts generated by this tenant

  @@map("tenants")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userTenants UserTenant[]
  affiliates  Affiliate[]  // Affiliate codes owned by this user

  @@map("users")
}

model UserTenant {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("user_tenants")
}

model Brand {
  id                 String              @id @default(cuid())
  tenantId           String
  name               String
  timezone           String              @default("UTC")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  assets             Asset[]
  brandKit           BrandKit?
  brandSettings      BrandSettings?
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  channelConnections ChannelConnection[]
  posts              Post[]

  @@map("brands")
}

model BrandKit {
  id        String   @id @default(cuid())
  brandId   String   @unique
  colors    Json?
  fonts     Json?
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("brand_kits")
}

model BrandSettings {
  id                   String   @id @default(cuid())
  brandId              String   @unique
  autoApproveIfNoReply Boolean  @default(false)
  notifyOnFailure      Boolean  @default(true)
  autoApproveHours     Int      @default(1)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  brand                Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("brand_settings")
}

model Post {
  id                 String          @id @default(cuid())
  brandId            String
  title              String
  status             PostStatus      @default(DRAFT)
  publishedAt        DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tenantId           String
  content            Json
  approvalNotifiedAt DateTime?
  approvalLogs       ApprovalLog[]
  assets             Asset[]
  analytics          PostAnalytics[]
  brand              Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  tenant             Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  schedule           Schedule?

  @@map("posts")
}

model Schedule {
  id        String         @id @default(cuid())
  postId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  runAt     DateTime
  timezone  String         @default("UTC")
  status    ScheduleStatus @default(PENDING)
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model ChannelConnection {
  id          String      @id @default(cuid())
  brandId     String
  channelType ChannelType
  channelId   String
  accessToken String?
  isActive    Boolean     @default(true)
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  brand       Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, channelType, channelId])
  @@map("channel_connections")
}

model WhatsAppSession {
  id            String               @id @default(cuid())
  tenantId      String
  sessionId     String               @unique
  isActive      Boolean              @default(false)
  qrCode        String?
  metadata      Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  lastHeartbeat DateTime?
  status        String?
  lastSeen      DateTime?
  phoneNumber   String?
  messageLogs   WhatsAppMessageLog[]
  tenant        Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("whatsapp_sessions")
}

model WhatsAppMessageLog {
  id           String          @id @default(cuid())
  sessionId    String
  to           String
  message      String
  status       String
  sentAt       DateTime?
  deliveredAt  DateTime?
  readAt       DateTime?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  session      WhatsAppSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("whatsapp_message_logs")
}

model Asset {
  id           String   @id @default(cuid())
  brandId      String?
  postId       String?
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  brand        Brand?   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("assets")
}

model PostAnalytics {
  id          String      @id @default(cuid())
  postId      String
  channelType ChannelType
  impressions Int         @default(0)
  reach       Int         @default(0)
  engagement  Int         @default(0)
  clicks      Int         @default(0)
  shares      Int         @default(0)
  comments    Int         @default(0)
  likes       Int         @default(0)
  metadata    Json?
  recordedAt  DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, channelType, recordedAt])
  @@map("post_analytics")
}

model ApprovalLog {
  id        String         @id @default(cuid())
  postId    String
  userId    String?
  action    ApprovalAction
  status    PostStatus
  feedback  String?
  metadata  Json?
  createdAt DateTime       @default(now())
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("approval_logs")
}

model UsageLog {
  id          String      @id @default(cuid())
  tenantId    String
  usageType   UsageType
  amount      Int         @default(1)
  description String?
  metadata    Json?       // Additional context (postId, brandId, etc.)
  createdAt   DateTime    @default(now())
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
}

model Affiliate {
  id          String      @id @default(cuid())
  code        String      @unique // Unique affiliate code (e.g., "JOHN2024")
  ownerUserId String      // User who owns this affiliate code
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  owner       User        @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  referrals   Referral[]
  payouts     PayoutLedger[]

  @@map("affiliates")
}

model Referral {
  id          String        @id @default(cuid())
  code        String        // Affiliate code used for referral
  tenantId    String        // Tenant that was referred
  status      ReferralStatus @default(PENDING)
  signupDate  DateTime      @default(now())
  activatedAt DateTime?     // When referral became active (first payment)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  affiliate   Affiliate     @relation(fields: [code], references: [code], onDelete: Cascade)
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([code, tenantId])
  @@map("referrals")
}

model PayoutLedger {
  id            String      @id @default(cuid())
  affiliateCode String      // Affiliate code earning the commission
  tenantId      String      // Tenant generating the revenue
  amount        Decimal     @db.Decimal(10, 2) // Commission amount (30% of subscription)
  currency      String      @default("USD")
  period        String      // Billing period (e.g., "2024-09")
  status        PayoutStatus @default(PENDING)
  dueDate       DateTime    // When payout is due
  paidAt        DateTime?   // When payout was processed
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  affiliate     Affiliate   @relation(fields: [affiliateCode], references: [code], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([affiliateCode, tenantId, period])
  @@map("payout_ledger")
}

enum ApprovalAction {
  CREATED
  SUBMITTED_FOR_APPROVAL
  APPROVED
  REJECTED
  CHANGE_REQUESTED
  RESUBMITTED
  SCHEDULED
  PUBLISHED
  PAUSED
  ARCHIVED
}

enum UserRole {
  OWNER
  ADMIN
  STAFF
  CLIENT
}

enum PlanType {
  STARTER
  GROWTH
  AGENCY
}

enum UsageType {
  POST_GENERATION
  IMAGE_GENERATION
  BRAND_CREATION
  API_CALL
}

enum ReferralStatus {
  PENDING     // Signed up but not yet paid
  ACTIVE      // First payment made, earning commissions
  INACTIVE    // Stopped paying, no longer earning
  CANCELLED   // Account cancelled
}

enum PayoutStatus {
  PENDING     // Commission earned, payout pending
  PROCESSING  // Payout being processed
  PAID        // Payout completed
  FAILED      // Payout failed
  CANCELLED   // Payout cancelled
}

enum WhatsAppMode {
  DISABLED
  BASIC
  ADVANCED
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  ARCHIVED
  PAUSED
  PENDING_APPROVAL
}

enum ScheduleStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ChannelType {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  WHATSAPP
  TELEGRAM
}
